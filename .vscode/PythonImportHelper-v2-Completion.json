[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "distutils.sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.sysconfig",
        "description": "distutils.sysconfig",
        "detail": "distutils.sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "nx",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "nx",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "nx",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "nx",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.bipartite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.bipartite",
        "description": "networkx.algorithms.bipartite",
        "detail": "networkx.algorithms.bipartite",
        "documentation": {}
    },
    {
        "label": "moral",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "junction_tree",
        "importPath": "networkx.algorithms.tree.decomposition",
        "description": "networkx.algorithms.tree.decomposition",
        "isExtraImport": true,
        "detail": "networkx.algorithms.tree.decomposition",
        "documentation": {}
    },
    {
        "label": "graphviz_layout",
        "importPath": "networkx.drawing.nx_agraph",
        "description": "networkx.drawing.nx_agraph",
        "isExtraImport": true,
        "detail": "networkx.drawing.nx_agraph",
        "documentation": {}
    },
    {
        "label": "graphviz_layout",
        "importPath": "networkx.drawing.nx_agraph",
        "description": "networkx.drawing.nx_agraph",
        "isExtraImport": true,
        "detail": "networkx.drawing.nx_agraph",
        "documentation": {}
    },
    {
        "label": "graphviz_layout",
        "importPath": "networkx.drawing.nx_agraph",
        "description": "networkx.drawing.nx_agraph",
        "isExtraImport": true,
        "detail": "networkx.drawing.nx_agraph",
        "documentation": {}
    },
    {
        "label": "graphviz_layout",
        "importPath": "networkx.drawing.nx_agraph",
        "description": "networkx.drawing.nx_agraph",
        "isExtraImport": true,
        "detail": "networkx.drawing.nx_agraph",
        "documentation": {}
    },
    {
        "label": "graphviz_layout",
        "importPath": "networkx.drawing.nx_agraph",
        "description": "networkx.drawing.nx_agraph",
        "isExtraImport": true,
        "detail": "networkx.drawing.nx_agraph",
        "documentation": {}
    },
    {
        "label": "write_dot",
        "importPath": "networkx.drawing.nx_agraph",
        "description": "networkx.drawing.nx_agraph",
        "isExtraImport": true,
        "detail": "networkx.drawing.nx_agraph",
        "documentation": {}
    },
    {
        "label": "reverse_cuthill_mckee_ordering",
        "importPath": "networkx.utils",
        "description": "networkx.utils",
        "isExtraImport": true,
        "detail": "networkx.utils",
        "documentation": {}
    },
    {
        "label": "pairwise",
        "importPath": "networkx.utils",
        "description": "networkx.utils",
        "isExtraImport": true,
        "detail": "networkx.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "graph_could_be_isomorphic",
        "importPath": "networkx.algorithms.isomorphism.isomorph",
        "description": "networkx.algorithms.isomorphism.isomorph",
        "isExtraImport": true,
        "detail": "networkx.algorithms.isomorphism.isomorph",
        "documentation": {}
    },
    {
        "label": "graph_atlas_g",
        "importPath": "networkx.generators.atlas",
        "description": "networkx.generators.atlas",
        "isExtraImport": true,
        "detail": "networkx.generators.atlas",
        "documentation": {}
    },
    {
        "label": "graph_atlas_g",
        "importPath": "networkx.generators.atlas",
        "description": "networkx.generators.atlas",
        "isExtraImport": true,
        "detail": "networkx.generators.atlas",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "expected_degree_graph",
        "importPath": "networkx.generators.degree_seq",
        "description": "networkx.generators.degree_seq",
        "isExtraImport": true,
        "detail": "networkx.generators.degree_seq",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "flask",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask",
        "description": "flask",
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json_graph",
        "importPath": "networkx.readwrite",
        "description": "networkx.readwrite",
        "isExtraImport": true,
        "detail": "networkx.readwrite",
        "documentation": {}
    },
    {
        "label": "jit_data",
        "importPath": "networkx.readwrite.json_graph",
        "description": "networkx.readwrite.json_graph",
        "isExtraImport": true,
        "detail": "networkx.readwrite.json_graph",
        "documentation": {}
    },
    {
        "label": "jit_graph",
        "importPath": "networkx.readwrite.json_graph",
        "description": "networkx.readwrite.json_graph",
        "isExtraImport": true,
        "detail": "networkx.readwrite.json_graph",
        "documentation": {}
    },
    {
        "label": "NetworkXError",
        "importPath": "networkx.exception",
        "description": "networkx.exception",
        "isExtraImport": true,
        "detail": "networkx.exception",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "get_data",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "read_params",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ElasticNet",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "mlflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mlflow",
        "description": "mlflow",
        "detail": "mlflow",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "form_response",
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "isExtraImport": true,
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "api_response",
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "isExtraImport": true,
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "prediction_service",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "prediction_service",
        "description": "prediction_service",
        "detail": "prediction_service",
        "documentation": {}
    },
    {
        "label": "prediction",
        "importPath": "prediction_service",
        "description": "prediction_service",
        "isExtraImport": true,
        "detail": "prediction_service",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.activate_this",
        "description": ".tox.py37.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".tox.py37.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api, win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror==5: # access denied - user not admin.\n                raise\n            if silent:",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.util, importlib.machinery\n    suffix = '_d' if '_d.pyd' in importlib.machinery.EXTENSION_SUFFIXES else ''\n    filename = \"%s%d%d%s.dll\" % \\\n               (modname, sys.version_info[0], sys.version_info[1], suffix)\n    filename = os.path.join(lib_dir, \"pywin32_system32\", filename)\n    loader = importlib.machinery.ExtensionFileLoader(modname, filename)\n    spec = importlib.machinery.ModuleSpec(name=modname, loader=loader, origin=filename)\n    mod = importlib.util.module_from_spec(spec)",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n        finally:\n            my_key.Close()\n    finally:",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register = 1):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags['quiet']=1\n    for module, klass_name in com_modules:",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True):\n    \"\"\" Add (or remove) Pythonwin to context menu for python scripts.\n        ??? Should probably also add Edit command for pys files also.\n        Also need to remove these keys on uninstall, but there's no function\n            like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    lib_dir = distutils.sysconfig.get_python_lib(plat_specific=1)\n    classes_root=get_root_hkey()\n    ## Installer executable doesn't seem to pass anything to postinstall script indicating if it's a debug build,",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey()==winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0,shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0,shellcon.CSIDL_SYSTEM)",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api, win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):\n        this_dest = this_pyd + \".old\"",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\"Path \\\"{}\\\" does not exist!\".format(location))\n    return location\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,\n                                     description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), 'pywin32_postinstall.log'), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\",         \"Interpreter\"),\n    (\"win32com.servers.dictionary\",     \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\",\"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\",         \"Interpreter\"),\n    (\"win32com.servers.dictionary\",     \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\",\"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\",         \"Interpreter\"),\n    (\"win32com.servers.dictionary\",     \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\",\"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_postinstall",
        "description": ".tox.py37.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": ".tox.py37.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_testall",
        "description": ".tox.py37.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_rest=\"\"):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_rest.split()\n    print(script)\n    popen = subprocess.Popen(cmd, shell=True, cwd=dirname,\n                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    data = popen.communicate()[0]\n    if sys.version_info > (3,):\n        sys.stdout.write(data.decode('latin-1'))",
        "detail": ".tox.py37.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": ".tox.py37.Scripts.pywin32_testall",
        "description": ".tox.py37.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, script, cmdline_rest=\"\"):\n    for maybe in possible_locations:\n        if os.path.isfile(os.path.join(maybe, script)):\n            run_test(os.path.abspath(os.path.join(maybe, script)), cmdline_rest)\n            break\n    else:\n        raise RuntimeError(\"Failed to locate the test script '%s' in one of %s\"\n                           % (script, possible_locations))\nif __name__ == '__main__':\n    import argparse",
        "detail": ".tox.py37.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_testall",
        "description": ".tox.py37.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [site.getusersitepackages(), ] + site.getsitepackages()\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error.\ndef run_test(script, cmdline_rest=\"\"):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_rest.split()\n    print(script)\n    popen = subprocess.Popen(cmd, shell=True, cwd=dirname,",
        "detail": ".tox.py37.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": ".tox.py37.Scripts.pywin32_testall",
        "description": ".tox.py37.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages(), ] + site.getsitepackages()\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error.\ndef run_test(script, cmdline_rest=\"\"):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_rest.split()\n    print(script)\n    popen = subprocess.Popen(cmd, shell=True, cwd=dirname,\n                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)",
        "detail": ".tox.py37.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\npts = mlab.points3d(",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m)\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m)\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m)\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "hd",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "hd = \"H\" + chr(252) + \"sker D\" + chr(252)\nmh = \"Mot\" + chr(246) + \"rhead\"\nmc = \"M\" + chr(246) + \"tley Cr\" + chr(252) + \"e\"\nst = \"Sp\" + chr(305) + \"n\" + chr(776) + \"al Tap\"\nq = \"Queensr\" + chr(255) + \"che\"\nboc = \"Blue \" + chr(214) + \"yster Cult\"\ndt = \"Deatht\" + chr(246) + \"ngue\"\nG = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "mh",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "mh = \"Mot\" + chr(246) + \"rhead\"\nmc = \"M\" + chr(246) + \"tley Cr\" + chr(252) + \"e\"\nst = \"Sp\" + chr(305) + \"n\" + chr(776) + \"al Tap\"\nq = \"Queensr\" + chr(255) + \"che\"\nboc = \"Blue \" + chr(214) + \"yster Cult\"\ndt = \"Deatht\" + chr(246) + \"ngue\"\nG = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)\nG.add_edge(boc, mc)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "mc",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "mc = \"M\" + chr(246) + \"tley Cr\" + chr(252) + \"e\"\nst = \"Sp\" + chr(305) + \"n\" + chr(776) + \"al Tap\"\nq = \"Queensr\" + chr(255) + \"che\"\nboc = \"Blue \" + chr(214) + \"yster Cult\"\ndt = \"Deatht\" + chr(246) + \"ngue\"\nG = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)\nG.add_edge(boc, mc)\nG.add_edge(boc, dt)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "st",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "st = \"Sp\" + chr(305) + \"n\" + chr(776) + \"al Tap\"\nq = \"Queensr\" + chr(255) + \"che\"\nboc = \"Blue \" + chr(214) + \"yster Cult\"\ndt = \"Deatht\" + chr(246) + \"ngue\"\nG = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)\nG.add_edge(boc, mc)\nG.add_edge(boc, dt)\nG.add_edge(st, dt)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "q = \"Queensr\" + chr(255) + \"che\"\nboc = \"Blue \" + chr(214) + \"yster Cult\"\ndt = \"Deatht\" + chr(246) + \"ngue\"\nG = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)\nG.add_edge(boc, mc)\nG.add_edge(boc, dt)\nG.add_edge(st, dt)\nG.add_edge(q, st)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "boc",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "boc = \"Blue \" + chr(214) + \"yster Cult\"\ndt = \"Deatht\" + chr(246) + \"ngue\"\nG = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)\nG.add_edge(boc, mc)\nG.add_edge(boc, dt)\nG.add_edge(st, dt)\nG.add_edge(q, st)\nG.add_edge(dt, mh)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "dt = \"Deatht\" + chr(246) + \"ngue\"\nG = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)\nG.add_edge(boc, mc)\nG.add_edge(boc, dt)\nG.add_edge(st, dt)\nG.add_edge(q, st)\nG.add_edge(dt, mh)\nG.add_edge(st, mh)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(hd, mh)\nG.add_edge(mc, st)\nG.add_edge(boc, mc)\nG.add_edge(boc, dt)\nG.add_edge(st, dt)\nG.add_edge(q, st)\nG.add_edge(dt, mh)\nG.add_edge(st, mh)\n# write in UTF-8 encoding",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "fh",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "fh = open(\"edgelist.utf-8\", \"wb\")\nnx.write_multiline_adjlist(G, fh, delimiter=\"\\t\", encoding=\"utf-8\")\n# read and store in UTF-8\nfh = open(\"edgelist.utf-8\", \"rb\")\nH = nx.read_multiline_adjlist(fh, delimiter=\"\\t\", encoding=\"utf-8\")\nfor n in G.nodes():\n    if n not in H:\n        print(False)\nprint(list(G.nodes()))\npos = nx.spring_layout(G)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "fh",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "fh = open(\"edgelist.utf-8\", \"rb\")\nH = nx.read_multiline_adjlist(fh, delimiter=\"\\t\", encoding=\"utf-8\")\nfor n in G.nodes():\n    if n not in H:\n        print(False)\nprint(list(G.nodes()))\npos = nx.spring_layout(G)\nnx.draw(G, pos, font_size=16, with_labels=False)\nfor p in pos:  # raise text positions\n    pos[p][1] += 0.07",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "H = nx.read_multiline_adjlist(fh, delimiter=\"\\t\", encoding=\"utf-8\")\nfor n in G.nodes():\n    if n not in H:\n        print(False)\nprint(list(G.nodes()))\npos = nx.spring_layout(G)\nnx.draw(G, pos, font_size=16, with_labels=False)\nfor p in pos:  # raise text positions\n    pos[p][1] += 0.07\nnx.draw_networkx_labels(G, pos)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "peekOfCode": "pos = nx.spring_layout(G)\nnx.draw(G, pos, font_size=16, with_labels=False)\nfor p in pos:  # raise text positions\n    pos[p][1] += 0.07\nnx.draw_networkx_labels(G, pos)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k ** p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), int(G.order() / node_divisor)))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.advanced.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = numpy.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100)\nplt.subplot(211)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100)\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100)\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100)\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100)\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = numpy.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = numpy.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = numpy.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = numpy.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\nnx.draw(G)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "peekOfCode": "B = nx.DiGraph()\nB.add_nodes_from([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"])\nB.add_edges_from(\n    [(\"A\", \"B\"), (\"A\", \"C\"), (\"B\", \"D\"), (\"B\", \"F\"), (\"C\", \"E\"), (\"E\", \"F\")]\n)\noptions = {\"with_labels\": True, \"node_color\": \"white\", \"edgecolors\": \"blue\"}\nbayes_pos = layout(B, prog=\"neato\")\nax1 = plt.subplot(1, 3, 1)\nplt.title(\"Bayesian Network\")\nnx.draw_networkx(B, pos=bayes_pos, **options)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "peekOfCode": "options = {\"with_labels\": True, \"node_color\": \"white\", \"edgecolors\": \"blue\"}\nbayes_pos = layout(B, prog=\"neato\")\nax1 = plt.subplot(1, 3, 1)\nplt.title(\"Bayesian Network\")\nnx.draw_networkx(B, pos=bayes_pos, **options)\nmg = moral.moral_graph(B)\nplt.subplot(1, 3, 2, sharex=ax1, sharey=ax1)\nplt.title(\"Moralized Graph\")\nnx.draw_networkx(mg, pos=bayes_pos, **options)\njt = junction_tree(B)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "documentation": {}
    },
    {
        "label": "bayes_pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "peekOfCode": "bayes_pos = layout(B, prog=\"neato\")\nax1 = plt.subplot(1, 3, 1)\nplt.title(\"Bayesian Network\")\nnx.draw_networkx(B, pos=bayes_pos, **options)\nmg = moral.moral_graph(B)\nplt.subplot(1, 3, 2, sharex=ax1, sharey=ax1)\nplt.title(\"Moralized Graph\")\nnx.draw_networkx(mg, pos=bayes_pos, **options)\njt = junction_tree(B)\nplt.subplot(1, 3, 3)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "peekOfCode": "ax1 = plt.subplot(1, 3, 1)\nplt.title(\"Bayesian Network\")\nnx.draw_networkx(B, pos=bayes_pos, **options)\nmg = moral.moral_graph(B)\nplt.subplot(1, 3, 2, sharex=ax1, sharey=ax1)\nplt.title(\"Moralized Graph\")\nnx.draw_networkx(mg, pos=bayes_pos, **options)\njt = junction_tree(B)\nplt.subplot(1, 3, 3)\nplt.title(\"Junction Tree\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "documentation": {}
    },
    {
        "label": "mg",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "peekOfCode": "mg = moral.moral_graph(B)\nplt.subplot(1, 3, 2, sharex=ax1, sharey=ax1)\nplt.title(\"Moralized Graph\")\nnx.draw_networkx(mg, pos=bayes_pos, **options)\njt = junction_tree(B)\nplt.subplot(1, 3, 3)\nplt.title(\"Junction Tree\")\nnsize = [2000 * len(n) for n in list(jt.nodes())]\nnx.draw_networkx(jt, pos=layout(jt, prog=\"neato\"), node_size=nsize, **options)\nplt.tight_layout()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "documentation": {}
    },
    {
        "label": "jt",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "peekOfCode": "jt = junction_tree(B)\nplt.subplot(1, 3, 3)\nplt.title(\"Junction Tree\")\nnsize = [2000 * len(n) for n in list(jt.nodes())]\nnx.draw_networkx(jt, pos=layout(jt, prog=\"neato\"), node_size=nsize, **options)\nplt.tight_layout()\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "documentation": {}
    },
    {
        "label": "nsize",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "peekOfCode": "nsize = [2000 * len(n) for n in list(jt.nodes())]\nnx.draw_networkx(jt, pos=layout(jt, prog=\"neato\"), node_size=nsize, **options)\nplt.tight_layout()\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_decomposition",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\nnx.draw(G)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\nnx.draw(G)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\nnx.draw(G, with_labels=True)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_read_write",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\nnx.draw(H)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_read_write",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\nnx.draw(H)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "atlas6",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "peekOfCode": "def atlas6():\n    \"\"\" Return the atlas of all connected graphs of 6 nodes or less.\n        Attempt to check for isomorphisms and remove.\n    \"\"\"\n    Atlas = graph_atlas_g()[0:208]  # 208\n    # remove isolated nodes, only connected graphs are left\n    U = nx.Graph()  # graph for union of all graphs in atlas\n    for G in Atlas:\n        zerodegree = [n for n in G if G.degree(n) == 0]\n        for n in zerodegree:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "documentation": {}
    },
    {
        "label": "iso",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "peekOfCode": "def iso(G1, glist):\n    \"\"\"Quick and dirty nonisomorphism checker used to check isomorphisms.\"\"\"\n    for G2 in glist:\n        if isomorphic(G1, G2):\n            return True\n    return False\nG = atlas6()\nprint(f\"graph has {nx.number_of_nodes(G)} nodes with {nx.number_of_edges(G)} edges\")\nprint(nx.number_connected_components(G), \"connected components\")\nplt.figure(1, figsize=(8, 8))",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "peekOfCode": "G = atlas6()\nprint(f\"graph has {nx.number_of_nodes(G)} nodes with {nx.number_of_edges(G)} edges\")\nprint(nx.number_connected_components(G), \"connected components\")\nplt.figure(1, figsize=(8, 8))\n# layout graphs with positions using graphviz neato\npos = graphviz_layout(G, prog=\"neato\")\n# color nodes the same in each connected subgraph\nC = (G.subgraph(c) for c in nx.connected_components(G))\nfor g in C:\n    c = [random.random()] * nx.number_of_nodes(g)  # random color...",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "peekOfCode": "pos = graphviz_layout(G, prog=\"neato\")\n# color nodes the same in each connected subgraph\nC = (G.subgraph(c) for c in nx.connected_components(G))\nfor g in C:\n    c = [random.random()] * nx.number_of_nodes(g)  # random color...\n    nx.draw(g, pos, node_size=40, node_color=c, vmin=0.0, vmax=1.0, with_labels=False)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "peekOfCode": "C = (G.subgraph(c) for c in nx.connected_components(G))\nfor g in C:\n    c = [random.random()] * nx.number_of_nodes(g)  # random color...\n    nx.draw(g, pos, node_size=40, node_color=c, vmin=0.0, vmax=1.0, with_labels=False)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_atlas",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .gz or .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    datafile = bz2.BZ2File(pgn_file)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .gz or .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nngames = G.number_of_edges()\nnplayers = G.number_of_nodes()\nprint(f\"Loaded {ngames} chess games between {nplayers} players\\n\")\n# identify connected components\n# of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(\"Note the disconnected component consisting of:\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "ngames",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "ngames = G.number_of_edges()\nnplayers = G.number_of_nodes()\nprint(f\"Loaded {ngames} chess games between {nplayers} players\\n\")\n# identify connected components\n# of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(\"Note the disconnected component consisting of:\")\n    print(Gcc[1].nodes())",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nplayers",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "nplayers = G.number_of_nodes()\nprint(f\"Loaded {ngames} chess games between {nplayers} players\\n\")\n# identify connected components\n# of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(\"Note the disconnected component consisting of:\")\n    print(Gcc[1].nodes())\n# find all games with B97 opening (as described in ECO)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(\"Note the disconnected component consisting of:\")\n    print(Gcc[1].nodes())\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(\"Note the disconnected component consisting of:\")\n    print(Gcc[1].nodes())\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        print(white, \"vs\", black)\n        for k, v in game_info.items():\n            print(\"   \", k, \": \", v)\n        print(\"\\n\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = []\nfor (u, v, d) in H.edges(data=True):\n    edgewidth.append(len(G.get_edge_data(u, v)))\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = []\nfor (u, v, d) in H.edges(data=True):\n    edgewidth.append(len(G.get_edge_data(u, v)))\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"text.usetex\"]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "plt.rcParams[\"text.usetex\"] = False\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnodesize = [wins[v] * 50 for v in H]\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"w\", alpha=0.4)\nnx.draw_networkx_edges(H, pos, alpha=0.4, node_size=0, width=1, edge_color=\"k\")\nnx.draw_networkx_labels(H, pos, font_size=14)\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nplt.title(\"World Chess Championship Games: 1886 - 1985\", font)\n# change font and write text (using data coordinates)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"w\", alpha=0.4)\nnx.draw_networkx_edges(H, pos, alpha=0.4, node_size=0, width=1, edge_color=\"k\")\nnx.draw_networkx_labels(H, pos, font_size=14)\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nplt.title(\"World Chess Championship Games: 1886 - 1985\", font)\n# change font and write text (using data coordinates)\nfont = {\"fontname\": \"Helvetica\", \"color\": \"r\", \"fontweight\": \"bold\", \"fontsize\": 14}\nplt.text(\n    0.5,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nplt.title(\"World Chess Championship Games: 1886 - 1985\", font)\n# change font and write text (using data coordinates)\nfont = {\"fontname\": \"Helvetica\", \"color\": \"r\", \"fontweight\": \"bold\", \"fontsize\": 14}\nplt.text(\n    0.5,\n    0.97,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=plt.gca().transAxes,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"r\", \"fontweight\": \"bold\", \"fontsize\": 14}\nplt.text(\n    0.5,\n    0.97,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=plt.gca().transAxes,\n)\nplt.text(\n    0.5,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_circular_tree",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_circular_tree",
        "peekOfCode": "G = nx.balanced_tree(3, 5)\npos = graphviz_layout(G, prog=\"twopi\", args=\"\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_size=20, alpha=0.5, node_color=\"blue\", with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_circular_tree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_circular_tree",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_circular_tree",
        "peekOfCode": "pos = graphviz_layout(G, prog=\"twopi\", args=\"\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_size=20, alpha=0.5, node_color=\"blue\", with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_circular_tree",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02)\ndegree_sequence = sorted([d for n, d in G.degree()], reverse=True)  # degree sequence\ndegreeCount = collections.Counter(degree_sequence)\ndeg, cnt = zip(*degreeCount.items())\nfig, ax = plt.subplots()\nplt.bar(deg, cnt, width=0.80, color=\"b\")\nplt.title(\"Degree Histogram\")\nplt.ylabel(\"Count\")\nplt.xlabel(\"Degree\")\nax.set_xticks([d + 0.4 for d in deg])",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "peekOfCode": "degree_sequence = sorted([d for n, d in G.degree()], reverse=True)  # degree sequence\ndegreeCount = collections.Counter(degree_sequence)\ndeg, cnt = zip(*degreeCount.items())\nfig, ax = plt.subplots()\nplt.bar(deg, cnt, width=0.80, color=\"b\")\nplt.title(\"Degree Histogram\")\nplt.ylabel(\"Count\")\nplt.xlabel(\"Degree\")\nax.set_xticks([d + 0.4 for d in deg])\nax.set_xticklabels(deg)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "documentation": {}
    },
    {
        "label": "degreeCount",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "peekOfCode": "degreeCount = collections.Counter(degree_sequence)\ndeg, cnt = zip(*degreeCount.items())\nfig, ax = plt.subplots()\nplt.bar(deg, cnt, width=0.80, color=\"b\")\nplt.title(\"Degree Histogram\")\nplt.ylabel(\"Count\")\nplt.xlabel(\"Degree\")\nax.set_xticks([d + 0.4 for d in deg])\nax.set_xticklabels(deg)\n# draw graph in inset",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(G)\nplt.axis(\"off\")\nnx.draw_networkx_nodes(G, pos, node_size=20)\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "peekOfCode": "pos = nx.spring_layout(G)\nplt.axis(\"off\")\nnx.draw_networkx_nodes(G, pos, node_size=20)\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_histogram",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02)\ndegree_sequence = sorted([d for n, d in G.degree()], reverse=True)\ndmax = max(degree_sequence)\nplt.loglog(degree_sequence, \"b-\", marker=\"o\")\nplt.title(\"Degree rank plot\")\nplt.ylabel(\"degree\")\nplt.xlabel(\"rank\")\n# draw graph in inset\nplt.axes([0.45, 0.45, 0.45, 0.45])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "peekOfCode": "degree_sequence = sorted([d for n, d in G.degree()], reverse=True)\ndmax = max(degree_sequence)\nplt.loglog(degree_sequence, \"b-\", marker=\"o\")\nplt.title(\"Degree rank plot\")\nplt.ylabel(\"degree\")\nplt.xlabel(\"rank\")\n# draw graph in inset\nplt.axes([0.45, 0.45, 0.45, 0.45])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "peekOfCode": "dmax = max(degree_sequence)\nplt.loglog(degree_sequence, \"b-\", marker=\"o\")\nplt.title(\"Degree rank plot\")\nplt.ylabel(\"degree\")\nplt.xlabel(\"rank\")\n# draw graph in inset\nplt.axes([0.45, 0.45, 0.45, 0.45])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc)\nplt.axis(\"off\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc)\nplt.axis(\"off\")\nnx.draw_networkx_nodes(Gcc, pos, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, alpha=0.4)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "peekOfCode": "pos = nx.spring_layout(Gcc)\nplt.axis(\"off\")\nnx.draw_networkx_nodes(Gcc, pos, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, alpha=0.4)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_degree_rank",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.generators.directed.random_k_out_graph(10, 3, 0.5)\npos = nx.layout.spring_layout(G)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"blue\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.layout.spring_layout(G)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"blue\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"blue\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"blue\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"blue\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"blue\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=plt.cm.Blues,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"blue\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=plt.cm.Blues,\n    width=2,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=plt.cm.Blues,\n    width=2,\n)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=plt.cm.Blues)\npc.set_array(edge_colors)\nplt.colorbar(pc)\nax = plt.gca()\nax.set_axis_off()\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G)\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G)\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nG = nx.generators.barabasi_albert_graph(n, m)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nG = nx.generators.barabasi_albert_graph(n, m)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego)\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.generators.barabasi_albert_graph(n, m)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego)\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego)\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego)\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego)\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100)\nplt.subplot(221)\nnx.draw(G, pos, font_size=8)\nplt.subplot(222)\nnx.draw(G, pos, node_color=\"k\", node_size=0, with_labels=False)\nplt.subplot(223)\nnx.draw(G, pos, node_color=\"g\", node_size=250, with_labels=False, width=6)\nplt.subplot(224)\nH = G.to_directed()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100)\nplt.subplot(221)\nnx.draw(G, pos, font_size=8)\nplt.subplot(222)\nnx.draw(G, pos, node_color=\"k\", node_size=0, with_labels=False)\nplt.subplot(223)\nnx.draw(G, pos, node_color=\"g\", node_size=250, with_labels=False, width=6)\nplt.subplot(224)\nH = G.to_directed()\nnx.draw(H, pos, node_color=\"b\", node_size=20, with_labels=False)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(H, pos, node_color=\"b\", node_size=20, with_labels=False)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "peekOfCode": "n = 150  # 150 nodes\n# p value at which giant component (of size log(n) nodes) is expected\np_giant = 1.0 / (n - 1)\n# p value at which graph is expected to become completely connected\np_conn = math.log(n) / float(n)\n# the following range of p values should be close to the threshold\npvals = [0.003, 0.006, 0.008, 0.015]\nregion = 220  # for pylab 2x2 subplot layout\nplt.subplots_adjust(left=0, right=1, bottom=0, top=0.95, wspace=0.01, hspace=0.01)\nfor p in pvals:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "documentation": {}
    },
    {
        "label": "p_giant",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "peekOfCode": "p_giant = 1.0 / (n - 1)\n# p value at which graph is expected to become completely connected\np_conn = math.log(n) / float(n)\n# the following range of p values should be close to the threshold\npvals = [0.003, 0.006, 0.008, 0.015]\nregion = 220  # for pylab 2x2 subplot layout\nplt.subplots_adjust(left=0, right=1, bottom=0, top=0.95, wspace=0.01, hspace=0.01)\nfor p in pvals:\n    G = nx.binomial_graph(n, p)\n    pos = layout(G)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "documentation": {}
    },
    {
        "label": "p_conn",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "peekOfCode": "p_conn = math.log(n) / float(n)\n# the following range of p values should be close to the threshold\npvals = [0.003, 0.006, 0.008, 0.015]\nregion = 220  # for pylab 2x2 subplot layout\nplt.subplots_adjust(left=0, right=1, bottom=0, top=0.95, wspace=0.01, hspace=0.01)\nfor p in pvals:\n    G = nx.binomial_graph(n, p)\n    pos = layout(G)\n    region += 1\n    plt.subplot(region)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "documentation": {}
    },
    {
        "label": "pvals",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "peekOfCode": "pvals = [0.003, 0.006, 0.008, 0.015]\nregion = 220  # for pylab 2x2 subplot layout\nplt.subplots_adjust(left=0, right=1, bottom=0, top=0.95, wspace=0.01, hspace=0.01)\nfor p in pvals:\n    G = nx.binomial_graph(n, p)\n    pos = layout(G)\n    region += 1\n    plt.subplot(region)\n    plt.title(f\"p = {p:.3f}\")\n    nx.draw(G, pos, with_labels=False, node_size=10)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "documentation": {}
    },
    {
        "label": "region",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "peekOfCode": "region = 220  # for pylab 2x2 subplot layout\nplt.subplots_adjust(left=0, right=1, bottom=0, top=0.95, wspace=0.01, hspace=0.01)\nfor p in pvals:\n    G = nx.binomial_graph(n, p)\n    pos = layout(G)\n    region += 1\n    plt.subplot(region)\n    plt.title(f\"p = {p:.3f}\")\n    nx.draw(G, pos, with_labels=False, node_size=10)\n    # identify largest connected component",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_giant_component",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_house_with_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4])\nnx.draw_networkx_nodes(G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"b\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_house_with_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4])\nnx.draw_networkx_nodes(G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"b\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\" Return the cites example graph in miles_dat.txt\n        from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(f\"digraph has {nx.number_of_nodes(G)} nodes with {nx.number_of_edges(G)} edges\")\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nplt.figure(figsize=(8, 8))\n# with nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\nnx.draw(\n    H,\n    G.position,\n    node_size=[G.population[v] for v in H],\n    node_color=node_color,\n    with_labels=False,\n)\n# scale the axes equally\nplt.xlim(-5000, 500)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G)  # positions for all nodes\n# nodes\noptions = {\"node_size\": 500, \"alpha\": 0.8}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"r\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"b\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G)  # positions for all nodes\n# nodes\noptions = {\"node_size\": 500, \"alpha\": 0.8}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"r\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"b\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"node_size\": 500, \"alpha\": 0.8}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"r\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"b\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=16)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "lanl_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "peekOfCode": "def lanl_graph():\n    \"\"\" Return the lanl internet view graph from lanl.edges\n    \"\"\"\n    try:\n        fh = open(\"lanl_routes.edgelist\")\n    except OSError:\n        print(\"lanl.edges not found\")\n        raise\n    G = nx.Graph()\n    time = {}",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "peekOfCode": "G = lanl_graph()\nprint(f\"graph has {nx.number_of_nodes(G)} nodes with {nx.number_of_edges(G)} edges\")\nprint(nx.number_connected_components(G), \"connected components\")\nplt.figure(figsize=(8, 8))\n# use graphviz to find radial layout\npos = graphviz_layout(G, prog=\"twopi\", root=0)\n# draw nodes, coloring by rtt ping time\noptions = {\"with_labels\": False, \"alpha\": 0.5, \"node_size\": 15}\nnx.draw(G, pos, node_color=[G.rtt[v] for v in G], **options)\n# adjust the plot limits",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "peekOfCode": "pos = graphviz_layout(G, prog=\"twopi\", root=0)\n# draw nodes, coloring by rtt ping time\noptions = {\"with_labels\": False, \"alpha\": 0.5, \"node_size\": 15}\nnx.draw(G, pos, node_color=[G.rtt[v] for v in G], **options)\n# adjust the plot limits\nxmax = 1.02 * max(xx for xx, yy in pos.values())\nymax = 1.02 * max(yy for xx, yy in pos.values())\nplt.xlim(0, xmax)\nplt.ylim(0, ymax)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "peekOfCode": "options = {\"with_labels\": False, \"alpha\": 0.5, \"node_size\": 15}\nnx.draw(G, pos, node_color=[G.rtt[v] for v in G], **options)\n# adjust the plot limits\nxmax = 1.02 * max(xx for xx, yy in pos.values())\nymax = 1.02 * max(yy for xx, yy in pos.values())\nplt.xlim(0, xmax)\nplt.ylim(0, ymax)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "documentation": {}
    },
    {
        "label": "xmax",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "peekOfCode": "xmax = 1.02 * max(xx for xx, yy in pos.values())\nymax = 1.02 * max(yy for xx, yy in pos.values())\nplt.xlim(0, xmax)\nplt.ylim(0, ymax)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "documentation": {}
    },
    {
        "label": "ymax",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "peekOfCode": "ymax = 1.02 * max(yy for xx, yy in pos.values())\nplt.xlim(0, xmax)\nplt.ylim(0, ymax)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_lanl_routes",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for (i, layer) in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_node_colormap",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.spring_layout(G, iterations=200)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_node_colormap",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=200)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, nodelist=[ncenter], alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_simple_path",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\nnx.draw(G)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_spectral_grid",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_spectral_grid",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor (u, v, d) in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G)  # positions for all nodes",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G)  # positions for all nodes\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G)  # positions for all nodes\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# labels",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G)  # positions for all nodes\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "atlas",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.dot_atlas",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.dot_atlas",
        "peekOfCode": "atlas = graph_atlas_g()[0:20]\nfor G in atlas:\n    print(\n        f\"{G.name} has {nx.number_of_nodes(G)} nodes with {nx.number_of_edges(G)} edges\"\n    )\n    A = nx.nx_agraph.to_agraph(G)\n    A.graph_attr[\"label\"] = G.name\n    # set default node attributes\n    A.node_attr[\"color\"] = \"red\"\n    A.node_attr[\"style\"] = \"filled\"",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.dot_atlas",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z)  # configuration model\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(z)  # configuration model\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\nnx.draw(G)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nG = nx.gnm_random_graph(n, m)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nG = nx.gnm_random_graph(n, m)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\nnx.draw(G)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, **options)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_karate_club",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_napoleon_russian_campaign",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_napoleon_russian_campaign",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [int(G.pop[n] / 300.0) for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\" Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(f\"digraph has {nx.number_of_nodes(G)} nodes with {nx.number_of_edges(G)} edges\")\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(f\"Graph has {nx.number_of_nodes(G)} nodes with {nx.number_of_edges(G)} edges\")\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor (source, target) in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        sp = nx.shortest_path(G, source, target)\n        for n in sp:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "static_proxy",
        "kind": 2,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "peekOfCode": "def static_proxy():\n    return app.send_static_file(\"force.html\")\nprint(\"\\nGo to http://localhost:8000 to see the example\\n\")\napp.run(port=8000)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "peekOfCode": "G = nx.barbell_graph(6, 3)\n# this d3 example uses the name attribute for the mouse-hover value,\n# so add a name to each node\nfor n in G:\n    G.nodes[n][\"name\"] = n\n# write json formatted data\nd = json_graph.node_link_data(G)  # node-link format to serialize\n# write json\njson.dump(d, open(\"force/force.json\", \"w\"))\nprint(\"Wrote node-link JSON data to force/force.json\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "peekOfCode": "d = json_graph.node_link_data(G)  # node-link format to serialize\n# write json\njson.dump(d, open(\"force/force.json\", \"w\"))\nprint(\"Wrote node-link JSON data to force/force.json\")\n# Serve the file over http to allow for cross origin requests\napp = flask.Flask(__name__, static_folder=\"force\")\n@app.route(\"/\")\ndef static_proxy():\n    return app.send_static_file(\"force.html\")\nprint(\"\\nGo to http://localhost:8000 to see the example\\n\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "peekOfCode": "app = flask.Flask(__name__, static_folder=\"force\")\n@app.route(\"/\")\ndef static_proxy():\n    return app.send_static_file(\"force.html\")\nprint(\"\\nGo to http://localhost:8000 to see the example\\n\")\napp.run(port=8000)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.javascript.force",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"one\", type=\"normal\")\nG.add_node(\"two\", type=\"special\")\nG.add_node(\"solo\")\n# add edges\nG.add_edge(\"one\", \"two\")\nG.add_edge(\"two\", 3, type=\"extra special\")\n# convert to JIT JSON\njit_json = jit_data(G, indent=4)\nprint(jit_json)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "documentation": {}
    },
    {
        "label": "jit_json",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "peekOfCode": "jit_json = jit_data(G, indent=4)\nprint(jit_json)\nX = jit_graph(json.loads(jit_json))\nprint(f\"Nodes: {list(X.nodes(data=True))}\")\nprint(f\"Edges: {list(X.edges(data=True))}\")\nnx.draw(G, with_labels=True)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "peekOfCode": "X = jit_graph(json.loads(jit_json))\nprint(f\"Nodes: {list(X.nodes(data=True))}\")\nprint(f\"Edges: {list(X.edges(data=True))}\")\nnx.draw(G, with_labels=True)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.jit.plot_rgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "peekOfCode": "G = nx.Graph()\n# ad edges with red color\nG.add_edge(1, 2, color=\"red\")\nG.add_edge(2, 3, color=\"red\")\n# add nodes 3 and 4\nG.add_node(3)\nG.add_node(4)\n# convert to a graphviz agraph\nA = nx.nx_agraph.to_agraph(G)\n# write to dot file",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "peekOfCode": "A = nx.nx_agraph.to_agraph(G)\n# write to dot file\nA.write(\"k5_attributes.dot\")\n# convert back to networkx Graph with attributes on edges and\n# default attributes as dictionary data\nX = nx.nx_agraph.from_agraph(A)\nprint(\"edges\")\nprint(list(X.edges(data=True)))\nprint(\"default graph attributes\")\nprint(X.graph)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "peekOfCode": "X = nx.nx_agraph.from_agraph(A)\nprint(\"edges\")\nprint(list(X.edges(data=True)))\nprint(\"default graph attributes\")\nprint(X.graph)\nprint(\"node node attributes\")\nprint(X.nodes.data(True))",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_attributes",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_draw",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_draw",
        "peekOfCode": "G = nx.complete_graph(5)  # start with K5 in networkx\nA = nx.nx_agraph.to_agraph(G)  # convert to a graphviz graph\nA.layout()  # neato layout\nA.draw(\"k5.ps\")  # write postscript in k5.ps with neato layout",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_draw",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_draw",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_draw",
        "peekOfCode": "A = nx.nx_agraph.to_agraph(G)  # convert to a graphviz graph\nA.layout()  # neato layout\nA.draw(\"k5.ps\")  # write postscript in k5.ps with neato layout",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_draw",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "peekOfCode": "G = nx.complete_graph(5)  # start with K5 in networkx\nA = nx.nx_agraph.to_agraph(G)  # convert to a graphviz graph\nX1 = nx.nx_agraph.from_agraph(A)  # convert back to networkx (but as Graph)\nX2 = nx.Graph(A)  # fancy way to do conversion\nG1 = nx.Graph(X1)  # now make it a Graph\nA.write(\"k5.dot\")  # write to dot file\nX3 = nx.nx_agraph.read_dot(\"k5.dot\")  # read from dotfile",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "peekOfCode": "A = nx.nx_agraph.to_agraph(G)  # convert to a graphviz graph\nX1 = nx.nx_agraph.from_agraph(A)  # convert back to networkx (but as Graph)\nX2 = nx.Graph(A)  # fancy way to do conversion\nG1 = nx.Graph(X1)  # now make it a Graph\nA.write(\"k5.dot\")  # write to dot file\nX3 = nx.nx_agraph.read_dot(\"k5.dot\")  # read from dotfile",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "documentation": {}
    },
    {
        "label": "X1",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "peekOfCode": "X1 = nx.nx_agraph.from_agraph(A)  # convert back to networkx (but as Graph)\nX2 = nx.Graph(A)  # fancy way to do conversion\nG1 = nx.Graph(X1)  # now make it a Graph\nA.write(\"k5.dot\")  # write to dot file\nX3 = nx.nx_agraph.read_dot(\"k5.dot\")  # read from dotfile",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "documentation": {}
    },
    {
        "label": "X2",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "peekOfCode": "X2 = nx.Graph(A)  # fancy way to do conversion\nG1 = nx.Graph(X1)  # now make it a Graph\nA.write(\"k5.dot\")  # write to dot file\nX3 = nx.nx_agraph.read_dot(\"k5.dot\")  # read from dotfile",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "peekOfCode": "G1 = nx.Graph(X1)  # now make it a Graph\nA.write(\"k5.dot\")  # write to dot file\nX3 = nx.nx_agraph.read_dot(\"k5.dot\")  # read from dotfile",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "documentation": {}
    },
    {
        "label": "X3",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "peekOfCode": "X3 = nx.nx_agraph.read_dot(\"k5.dot\")  # read from dotfile",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_pygraphviz_simple",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_write_dotfile",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_write_dotfile",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\nwrite_dot(G, \"grid.dot\")\nprint(\"Now run: neato -Tps grid.dot >grid.ps\")",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.pygraphviz.plot_write_dotfile",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(nx.Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        Graph.__init__(self, data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "description": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\nnx.draw(G)\nplt.show()",
        "detail": ".tox.py37.share.doc.networkx-2.5.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "NotInRange",
        "kind": 6,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "class NotInRange(Exception):\n    def __init__(self, message=\"Values entered are not in expected range\"):\n        self.message = message\n        super().__init__(self.message)\nclass NotInCols(Exception):\n    def __init__(self, message=\"Not in cols\"):\n        self.message = message\n        super().__init__(self.message)\ndef read_params(config_path=params_path):\n    with open(config_path) as yaml_file:",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "NotInCols",
        "kind": 6,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "class NotInCols(Exception):\n    def __init__(self, message=\"Not in cols\"):\n        self.message = message\n        super().__init__(self.message)\ndef read_params(config_path=params_path):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\ndef predict(data):\n    config = read_params(params_path)",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "read_params",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def read_params(config_path=params_path):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\ndef predict(data):\n    config = read_params(params_path)\n    model_dir_path = config[\"webapp_model_dir\"]\n    model = joblib.load(model_dir_path)\n    prediction = model.predict(data).tolist()[0]\n    print(prediction)",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def predict(data):\n    config = read_params(params_path)\n    model_dir_path = config[\"webapp_model_dir\"]\n    model = joblib.load(model_dir_path)\n    prediction = model.predict(data).tolist()[0]\n    print(prediction)\n    try:\n        if 3 <= prediction <= 8:\n            return prediction\n        else:",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "get_schema",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def get_schema(schema_path=schema_path):\n    with open(schema_path) as json_file:\n        schema = json.load(json_file)\n    return schema\ndef validate_input(dict_request):\n    def _validate_cols(col):\n        schema = get_schema()\n        actual_cols = schema.keys()\n        if col not in actual_cols:\n            raise NotInCols",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "validate_input",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def validate_input(dict_request):\n    def _validate_cols(col):\n        schema = get_schema()\n        actual_cols = schema.keys()\n        if col not in actual_cols:\n            raise NotInCols\n    def _validate_values(col, val):\n        schema = get_schema()\n        if not (schema[col][\"min\"] <= float(dict_request[col]) <= schema[col][\"max\"]):\n            raise NotInRange",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "form_response",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def form_response(dict_request):\n    if validate_input(dict_request):\n        data = dict_request.values()\n        data = [list(map(float, data))]\n        response = predict(data)\n        return response\ndef api_response(dict_request):\n    try:\n        if validate_input(dict_request):\n            data = np.array([list(dict_request.values())])",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "api_response",
        "kind": 2,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "def api_response(dict_request):\n    try:\n        if validate_input(dict_request):\n            data = np.array([list(dict_request.values())])\n            response = predict(data)\n            response = {\"response\": response}\n            return response\n    except NotInRange as e:\n        response = {\"the_exected_range\": get_schema(), \"response\": str(e)}\n        return response",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "params_path",
        "kind": 5,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "params_path = \"params.yaml\"\nschema_path = os.path.join(\"prediction_service\", \"schema_in.json\")\nclass NotInRange(Exception):\n    def __init__(self, message=\"Values entered are not in expected range\"):\n        self.message = message\n        super().__init__(self.message)\nclass NotInCols(Exception):\n    def __init__(self, message=\"Not in cols\"):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "schema_path",
        "kind": 5,
        "importPath": "prediction_service.prediction",
        "description": "prediction_service.prediction",
        "peekOfCode": "schema_path = os.path.join(\"prediction_service\", \"schema_in.json\")\nclass NotInRange(Exception):\n    def __init__(self, message=\"Values entered are not in expected range\"):\n        self.message = message\n        super().__init__(self.message)\nclass NotInCols(Exception):\n    def __init__(self, message=\"Not in cols\"):\n        self.message = message\n        super().__init__(self.message)\ndef read_params(config_path=params_path):",
        "detail": "prediction_service.prediction",
        "documentation": {}
    },
    {
        "label": "read_params",
        "kind": 2,
        "importPath": "src.get_data",
        "description": "src.get_data",
        "peekOfCode": "def read_params(config_path):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\ndef get_data(config_path):\n    config = read_params(config_path)\n    # print(config)\n    data_path = config[\"data_source\"][\"s3_source\"]\n    df = pd.read_csv(data_path, sep=\",\", encoding='utf-8')\n    # print(df)",
        "detail": "src.get_data",
        "documentation": {}
    },
    {
        "label": "get_data",
        "kind": 2,
        "importPath": "src.get_data",
        "description": "src.get_data",
        "peekOfCode": "def get_data(config_path):\n    config = read_params(config_path)\n    # print(config)\n    data_path = config[\"data_source\"][\"s3_source\"]\n    df = pd.read_csv(data_path, sep=\",\", encoding='utf-8')\n    # print(df)\n    return df\nif __name__ == \"__main__\":\n    args = argparse.ArgumentParser()\n    args.add_argument(\"--config\", default=\"params.yaml\")",
        "detail": "src.get_data",
        "documentation": {}
    },
    {
        "label": "load_and_save",
        "kind": 2,
        "importPath": "src.load_data",
        "description": "src.load_data",
        "peekOfCode": "def load_and_save(config_path):\n    config = read_params(config_path)\n    df = get_data(config_path)\n    # Replace all the columns with _ that have a space between two word column\n    new_cols = [col.replace(\" \", \"_\") for col in df.columns]\n    # print(new_cols)\n    raw_data_path = config[\"load_data\"][\"raw_dataset_csv\"]\n    df.to_csv(raw_data_path, sep=\",\", index=False, header=new_cols)\nif __name__ == \"__main__\":\n    args = argparse.ArgumentParser()",
        "detail": "src.load_data",
        "documentation": {}
    },
    {
        "label": "split_and_saved_data",
        "kind": 2,
        "importPath": "src.split_data",
        "description": "src.split_data",
        "peekOfCode": "def split_and_saved_data(config_path):\n    config = read_params(config_path)\n    test_data_path = config[\"split_data\"][\"test_path\"]\n    train_data_path = config[\"split_data\"][\"train_path\"]\n    raw_data_path = config[\"load_data\"][\"raw_dataset_csv\"]\n    split_ratio = config[\"split_data\"][\"test_size\"]\n    random_state = config[\"base\"][\"random_state\"]\n    df = pd.read_csv(raw_data_path, sep=\",\")\n    train, test = train_test_split(\n        df,",
        "detail": "src.split_data",
        "documentation": {}
    },
    {
        "label": "eval_metrics",
        "kind": 2,
        "importPath": "src.train_and_evaluate",
        "description": "src.train_and_evaluate",
        "peekOfCode": "def eval_metrics(actual, pred):\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    mae = mean_absolute_error(actual, pred)\n    r2 = r2_score(actual, pred)\n    return rmse, mae, r2\ndef train_and_evaluate(config_path):\n    config = read_params(config_path)\n    test_data_path = config[\"split_data\"][\"test_path\"]\n    train_data_path = config[\"split_data\"][\"train_path\"]\n    random_state = config[\"base\"][\"random_state\"]",
        "detail": "src.train_and_evaluate",
        "documentation": {}
    },
    {
        "label": "train_and_evaluate",
        "kind": 2,
        "importPath": "src.train_and_evaluate",
        "description": "src.train_and_evaluate",
        "peekOfCode": "def train_and_evaluate(config_path):\n    config = read_params(config_path)\n    test_data_path = config[\"split_data\"][\"test_path\"]\n    train_data_path = config[\"split_data\"][\"train_path\"]\n    random_state = config[\"base\"][\"random_state\"]\n    model_dir = config[\"model_dir\"]\n    alpha = config[\"estimators\"][\"ElasticNet\"][\"params\"][\"alpha\"]\n    l1_ratio = config[\"estimators\"][\"ElasticNet\"][\"params\"][\"l1_ratio\"]\n    target = [config[\"base\"][\"target_col\"]]\n    train = pd.read_csv(train_data_path, sep=\",\")",
        "detail": "src.train_and_evaluate",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def config(config_path=\"params.yaml\"):\n    with open(config_path) as yaml_file:\n        config = yaml.safe_load(yaml_file)\n    return config\n@pytest.fixture\ndef schema_in(schema_path=\"schema_in.json\"):\n    with open(schema_path) as json_file:\n        schema = json.load(json_file)\n    return schema",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "schema_in",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def schema_in(schema_path=\"schema_in.json\"):\n    with open(schema_path) as json_file:\n        schema = json.load(json_file)\n    return schema",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_form_response_correct_range",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_form_response_correct_range(data=input_data[\"correct_range\"]):\n    res = form_response(data)\n    assert TARGET_range[\"min\"] <= res <= TARGET_range[\"max\"]\ndef test_api_response_correct_range(data=input_data[\"correct_range\"]):\n    res = api_response(data)\n    assert TARGET_range[\"min\"] <= res[\"response\"] <= TARGET_range[\"max\"]\ndef test_form_response_incorrect_range(data=input_data[\"incorrect_range\"]):\n    with pytest.raises(prediction_service.prediction.NotInRange):\n        res = form_response(data)\ndef test_api_response_incorrect_range(data=input_data[\"incorrect_range\"]):",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_api_response_correct_range",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_api_response_correct_range(data=input_data[\"correct_range\"]):\n    res = api_response(data)\n    assert TARGET_range[\"min\"] <= res[\"response\"] <= TARGET_range[\"max\"]\ndef test_form_response_incorrect_range(data=input_data[\"incorrect_range\"]):\n    with pytest.raises(prediction_service.prediction.NotInRange):\n        res = form_response(data)\ndef test_api_response_incorrect_range(data=input_data[\"incorrect_range\"]):\n    res = api_response(data)\n    assert res[\"response\"] == prediction_service.prediction.NotInRange().message\ndef test_api_response_incorrect_col(data=input_data[\"incorrect_col\"]):",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_form_response_incorrect_range",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_form_response_incorrect_range(data=input_data[\"incorrect_range\"]):\n    with pytest.raises(prediction_service.prediction.NotInRange):\n        res = form_response(data)\ndef test_api_response_incorrect_range(data=input_data[\"incorrect_range\"]):\n    res = api_response(data)\n    assert res[\"response\"] == prediction_service.prediction.NotInRange().message\ndef test_api_response_incorrect_col(data=input_data[\"incorrect_col\"]):\n    res = api_response(data)\n    assert res[\"response\"] == prediction_service.prediction.NotInCols().message",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_api_response_incorrect_range",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_api_response_incorrect_range(data=input_data[\"incorrect_range\"]):\n    res = api_response(data)\n    assert res[\"response\"] == prediction_service.prediction.NotInRange().message\ndef test_api_response_incorrect_col(data=input_data[\"incorrect_col\"]):\n    res = api_response(data)\n    assert res[\"response\"] == prediction_service.prediction.NotInCols().message",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_api_response_incorrect_col",
        "kind": 2,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "def test_api_response_incorrect_col(data=input_data[\"incorrect_col\"]):\n    res = api_response(data)\n    assert res[\"response\"] == prediction_service.prediction.NotInCols().message",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "input_data = {\n    \"incorrect_range\":\n    {\"fixed_acidity\": 7897897,\n     \"volatile_acidity\": 555,\n     \"citric_acid\": 99,\n     \"residual_sugar\": 99,\n     \"chlorides\": 12,\n     \"free_sulfur_dioxide\": 789,\n     \"total_sulfur_dioxide\": 75,\n     \"density\": 2,",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "TARGET_range",
        "kind": 5,
        "importPath": "tests.test_config",
        "description": "tests.test_config",
        "peekOfCode": "TARGET_range = {\n    \"min\": 3.0,\n    \"max\": 8.0\n}\ndef test_form_response_correct_range(data=input_data[\"correct_range\"]):\n    res = form_response(data)\n    assert TARGET_range[\"min\"] <= res <= TARGET_range[\"max\"]\ndef test_api_response_correct_range(data=input_data[\"correct_range\"]):\n    res = api_response(data)\n    assert TARGET_range[\"min\"] <= res[\"response\"] <= TARGET_range[\"max\"]",
        "detail": "tests.test_config",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                dict_req = dict(request.form)\n                response = prediction.form_response(dict_req)\n                return render_template(\"index.html\", response=response)\n            elif request.json:\n                response = prediction.api_response(request.json)\n                return jsonify(response)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "webapp_root",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "webapp_root = \"webapp\"\nstatic_dir = os.path.join(webapp_root, \"static\")\ntemplate_dir = os.path.join(webapp_root, \"templates\")\napp = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                dict_req = dict(request.form)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "static_dir",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "static_dir = os.path.join(webapp_root, \"static\")\ntemplate_dir = os.path.join(webapp_root, \"templates\")\napp = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                dict_req = dict(request.form)\n                response = prediction.form_response(dict_req)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "template_dir",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "template_dir = os.path.join(webapp_root, \"templates\")\napp = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                dict_req = dict(request.form)\n                response = prediction.form_response(dict_req)\n                return render_template(\"index.html\", response=response)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__, static_folder=static_dir, template_folder=template_dir)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        try:\n            if request.form:\n                dict_req = dict(request.form)\n                response = prediction.form_response(dict_req)\n                return render_template(\"index.html\", response=response)\n            elif request.json:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "dirs",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "dirs = [\n    os.path.join(\"data\", \"raw\"),\n    os.path.join(\"data\", \"processed\"),\n    \"notebooks\",\n    \"saved_models\",\n    \"src\"\n]\nfor dir_ in dirs:\n    os.makedirs(dir_, exist_ok=True)\n    with open(os.path.join(dir_, \".gitkeep\"), \"w\") as f:",
        "detail": "template",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "template",
        "description": "template",
        "peekOfCode": "files = [\n    \"dvc.yaml\",\n    \"params.yaml\",\n    \".gitignore\",\n    os.path.join(\"src\", \"__init__.py\")\n]\nfor file_ in files:\n    with open(file_, \"w\") as f:\n        pass",
        "detail": "template",
        "documentation": {}
    }
]